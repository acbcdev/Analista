name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Analista Extension ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Changes
          
          * Extension build for Chrome and Firefox
          * Auto-generated release from GitHub Actions
          
          ## Installation
          
          ### Chrome/Chromium:
          1. Download `analista-extension-chrome.zip`
          2. Extract the ZIP file
          3. Open Chrome and go to `chrome://extensions/`
          4. Enable "Developer mode"
          5. Click "Load unpacked" and select the extracted folder
          
          ### Firefox:
          1. Download `analista-extension-firefox.zip`
          2. Extract the ZIP file
          3. Open Firefox and go to `about:debugging`
          4. Click "This Firefox"
          5. Click "Load Temporary Add-on" and select the manifest.json file
        draft: false
        prerelease: false

  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        browser: [chrome, firefox]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build extension for ${{ matrix.browser }}
      run: |
        if [ "${{ matrix.browser }}" = "firefox" ]; then
          bun run build:firefox
        else
          bun run build
        fi
        
    - name: Verify build before zipping
      run: |
        # Determine the correct output directory
        if [ "${{ matrix.browser }}" = "firefox" ]; then
          OUTPUT_DIR=".output/firefox-mv2"
        else
          OUTPUT_DIR=".output/chrome-mv3"
        fi
        
        echo "Verifying build in: $OUTPUT_DIR"
        ls -la "$OUTPUT_DIR/"
        
        if [ ! -f "$OUTPUT_DIR/manifest.json" ]; then
          echo "❌ Build verification failed for ${{ matrix.browser }}"
          exit 1
        fi
        
        echo "✅ Build verified for ${{ matrix.browser }}"
        
    - name: Create ZIP for ${{ matrix.browser }}
      run: |
        if [ "${{ matrix.browser }}" = "firefox" ]; then
          bun run zip:firefox
        else
          bun run zip
        fi
        
    - name: Get ZIP filename
      id: get_zip
      run: |
        ZIP_FILE=$(ls *.zip | head -n 1)
        echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_OUTPUT
        echo "ZIP_NAME=analista-extension-${{ matrix.browser }}.zip" >> $GITHUB_OUTPUT
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ steps.get_zip.outputs.ZIP_FILE }}
        asset_name: ${{ steps.get_zip.outputs.ZIP_NAME }}
        asset_content_type: application/zip
