name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: write
      pull-requests: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build extension for Chrome
      run: bun run build
      
    - name: Build extension for Firefox
      run: bun run build:firefox
        
    - name: Verify builds before zipping
      run: |
        echo "Verifying Chrome build..."
        ls -la ".output/chrome-mv3/"
        
        if [ ! -f ".output/chrome-mv3/manifest.json" ]; then
          echo "❌ Chrome build verification failed"
          exit 1
        fi
        
        echo "Verifying Firefox build..."
        ls -la ".output/firefox-mv2/"
        
        if [ ! -f ".output/firefox-mv2/manifest.json" ]; then
          echo "❌ Firefox build verification failed"
          exit 1
        fi
        
        echo "✅ Both builds verified successfully"
        
    - name: Create ZIP files
      run: |
        # Clean any existing ZIP files first
        rm -f *.zip
        
        # Create Chrome ZIP
        echo "Creating Chrome ZIP..."
        bun run zip
        
        echo "Files after Chrome zip command:"
        ls -la
        
        # Find and rename Chrome ZIP
        if ls *.zip 1> /dev/null 2>&1; then
          CHROME_ZIP=$(ls *.zip | head -n 1)
          echo "Found Chrome ZIP: $CHROME_ZIP"
          cp "$CHROME_ZIP" analista-extension-chrome.zip
          rm "$CHROME_ZIP"
          echo "✅ Chrome ZIP created: analista-extension-chrome.zip"
        else
          echo "❌ No ZIP file found after Chrome build"
          exit 1
        fi
        
        # Create Firefox ZIP  
        echo "Creating Firefox ZIP..."
        bun run zip:firefox
        
        echo "Files after Firefox zip command:"
        ls -la
        
        # Find and rename Firefox ZIP (excluding the Chrome one we already have)
        FIREFOX_ZIP=$(ls *.zip | grep -v "analista-extension-chrome.zip" | head -n 1)
        if [ -n "$FIREFOX_ZIP" ] && [ -f "$FIREFOX_ZIP" ]; then
          echo "Found Firefox ZIP: $FIREFOX_ZIP"
          mv "$FIREFOX_ZIP" analista-extension-firefox.zip
          echo "✅ Firefox ZIP created: analista-extension-firefox.zip"
        else
          echo "❌ No Firefox ZIP file found"
          exit 1
        fi
        
        # Verify final ZIP files
        echo "Final ZIP files:"
        ls -la *.zip
        
        # Double check files exist and have reasonable size
        for zip_file in analista-extension-chrome.zip analista-extension-firefox.zip; do
          if [ ! -f "$zip_file" ]; then
            echo "❌ Missing: $zip_file"
            exit 1
          fi
          size=$(stat -c%s "$zip_file")
          if [ "$size" -lt 1000 ]; then
            echo "❌ $zip_file is too small ($size bytes)"
            exit 1
          fi
          echo "✅ $zip_file verified ($size bytes)"
        done
        
    - name: Debug before release
      run: |
        echo "=== DEBUG INFORMATION ==="
        echo "VERSION: ${{ steps.get_version.outputs.VERSION }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Working directory: $(pwd)"
        echo "ZIP files present:"
        ls -la *.zip || echo "No ZIP files found"
        echo "GitHub token available: ${{ secrets.GITHUB_TOKEN != '' }}"
        echo "========================="
        
    - name: Debug GitHub API access
      run: |
        echo "Testing GitHub API access..."
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }} | jq '.name' || echo "API call failed"
        
    - name: Create tag for workflow_dispatch
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "Creating tag: $VERSION"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Check if tag already exists
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists, skipping tag creation"
        else
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          echo "Tag $VERSION created and pushed"
        fi
        
    - name: Check if release exists
      id: check_release
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION" | jq -r '.tag_name // "null"')
        
        if [ "$RELEASE_EXISTS" != "null" ] && [ "$RELEASE_EXISTS" != "" ]; then
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "Release $VERSION already exists"
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
          echo "Release $VERSION does not exist, will create"
        fi
        
    - name: Create Release
      if: steps.check_release.outputs.release_exists == 'false'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Analista Extension ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Changes
          
          * Extension build for Chrome and Firefox
          * Auto-generated release from GitHub Actions
          * Triggered by: ${{ github.event_name }}
          
          ## Installation
          
          ### Chrome/Chromium:
          1. Download `analista-extension-chrome.zip`
          2. Extract the ZIP file
          3. Open Chrome and go to `chrome://extensions/`
          4. Enable "Developer mode"
          5. Click "Load unpacked" and select the extracted folder
          
          ### Firefox:
          1. Download `analista-extension-firefox.zip`
          2. Extract the ZIP file
          3. Open Firefox and go to `about:debugging`
          4. Click "This Firefox"
          5. Click "Load Temporary Add-on" and select the manifest.json file
        files: |
          analista-extension-chrome.zip
          analista-extension-firefox.zip
        draft: false
        prerelease: false
